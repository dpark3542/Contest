#include <csignal>
#include <ctime>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

#ifdef __linux__
#define BLACK "\033[0;30m"
#define RED "\033[0;31m"
#define GREEN "\033[0;32m"
#define BLUE "\033[0;34m"
void print_color(const std::string& s, const std::string& color) {
  std::cout << color << s << "\033[0m";
}
#elif _WIN32
#include <windows.h>
#define BLACK 7
#define RED 12
#define GREEN 2
#define BLUE 1
void print_color(const std::string& s, int color) {
  std::cout.flush();
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
  std::cout << s;
  std::cout.flush();
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), BLACK);
}
#endif


#include "%TaskFile%"

namespace jhelper {
  struct Test {
    std::string input;
    std::string output;
    bool active;
    bool has_output;
  };

  std::vector<std::vector<std::string>> tokenize(const std::string& s) {
    std::vector<std::vector<std::string>> v;
    std::stringstream ss(s);
    for (std::string line; std::getline(ss, line); ) {
      std::vector<std::string> w;
      std::istringstream iss(line);
      for (std::string token; iss >> token; ) {
        w.push_back(token);
      }
      if (!w.empty()) {
        v.push_back(w);
      }
    }
    return v;
  }

  std::string format(std::string s) {
    if (s.empty()) {
      return s;
    }
    int i = s.size() - 1;
    while (i >= 0 && isspace(s[i])) {
      i--;
    }
    if (i >= 99) {
      return s.substr(0, 96) + "...\n";
    }
    if (i < s.size() - 1) {
      return s.substr(0, i + 1) + "\n";
    }
    return s + "\n";
  }

  void abort_handler(int) {
    throw std::exception();
  }
}

int main() {
  signal(SIGABRT, &jhelper::abort_handler);
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::vector<jhelper::Test> tests = {
    %Tests%
  };
  bool allOK = true;
  int testID = 0;
  std::cout << std::fixed;
  double maxTime = 0.0;
  for(const jhelper::Test& test : tests) {
    std::cout << "Test #" << testID++ << std::endl;
    if (test.active) {
      std::stringstream in(test.input);
      std::ostringstream out;
      auto start = std::chrono::high_resolution_clock::now();
      %ClassName% solver;
      int t;
      in >> t;
      while (t--) {
        %SolverCall%
      }
      auto finish = std::chrono::high_resolution_clock::now();
      double currentTime = std::chrono::duration_cast<std::chrono::milliseconds>(finish - start).count() / 1000.0;
      maxTime = currentTime > maxTime ? currentTime : maxTime;
      if (test.has_output) {
        bool result = true;
        std::string msg;
        std::vector<std::vector<std::string>> a = jhelper::tokenize(test.output), b = jhelper::tokenize(out.str());
        if (a.size() != b.size()) {
          result = false;
          msg = "Expected " + std::to_string(a.size()) + " lines, found " + std::to_string(b.size()) + " lines.";
        }
        for (int i = 0; result && i < a.size(); i++) {
          if (a[i].size() != b[i].size()) {
            result = false;
            msg = "Line " + std::to_string(i + 1) + ": expected " + std::to_string(a[i].size()) + " tokens, found " + std::to_string(b[i].size()) + " tokens.";
            break;
          }
          for (int j = 0; j < a[i].size(); j++) {
            if (a[i][j] != b[i][j]) {
              result = false;
              msg = "Line " + std::to_string(i + 1) + ", token " + std::to_string(j + 1) + ": expected '" + a[i][j] + "', found '" + b[i][j] + "'.";
              break;
            }
          }
        }
        if (result) {
          std::cout << "Result: ";
          std::cout.flush();
          print_color("OK", GREEN);
          std::cout << std::endl;
        }
        else {
          std::cout << "Input: " << std::endl;
          print_color(jhelper::format(test.input), BLUE);
          std::cout << std::endl;
          std::cout << "Expected output: " << std::endl;
          print_color(jhelper::format(test.output), BLUE);
          std::cout << std::endl;
          std::cout << "Actual output: " << std::endl;
          print_color(jhelper::format(out.str()), BLUE);
          std::cout << std::endl;
          std::cout << "Result: ";
          std::cout.flush();
          print_color("Wrong Answer", RED);
          std::cout << std::endl;
          std::cout << msg << std::endl;
        }
        allOK = allOK && result;
      }
      else {
        std::cout << "Input: " << std::endl;
        print_color(jhelper::format(test.input), BLUE);
        std::cout << std::endl;
        std::cout << "Actual output: " << std::endl;
        print_color(jhelper::format(out.str()), BLUE);
        std::cout << std::endl;
      }
      std::cout << "Time: " << currentTime << "s." << std::endl;
    }
    else {
      std::cout << "SKIPPED\n";
    }

    std::cout << std::endl;
  }
  if (allOK) {
    print_color("All OK", GREEN);
    std::cout << std::endl;
  }
  else {
    print_color("Some cases failed", RED);
    std::cout << std::endl;
  }
  std::cout << "Max time: " << maxTime << "s." << std::endl;
  return 0;
}